import asyncio

from aiogram import types
from aiogram.fsm.context import FSMContext
from aiohttp.client_exceptions import ClientResponseError

from src.handlers.game.router import game_router
from src.state.game import GameState
from src.utils.config import HitStatus
from src.utils.parsers import parse_board, parse_coordinates
from src.utils.request import do_request

from conf.config import settings


@game_router.message(GameState.start_game)
async def start_game(message: types.Message, state: FSMContext) -> None:
    # –∑–¥–µ—Å—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É
    try:
        coord = parse_coordinates(message.text)[0]
    except ValueError:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É –¥–ª—è –≤—ã—Å—Ç—Ä–µ–ª–∞.\n' '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        return

    # –ø–æ—Å—ã–ª–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É –Ω–∞ –±—ç–∫
    try:
        data = (
            await do_request(
                f'{settings.BACKEND_HOST}/game/player_strike',
                json_data={'coord': coord},
            )
        )['data']
    except ClientResponseError:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É –¥–ª—è –≤—ã—Å—Ç—Ä–µ–ª–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        return

    strike_status = data['status']
    ai_board = parse_board(data['ai_board'])

    # –≤—ã–≤–æ–¥–∏–º –ø–æ–ª–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã—Å—Ç—Ä–µ–ª–∞
    match strike_status:
        case HitStatus.MISS.value:
            answer = '–û –Ω–µ—Ç! –≠—Ç–æ –ø—Ä–æ–º–∞—Ö, –∫–∞–ø–∏—Ç–∞–Ω...'
        case HitStatus.HIT.value:
            answer = '–ú—ã –∏—Ö –ø–æ–¥–±–∏–ª–∏, —Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å, –∫–∞–ø–∏—Ç–∞–Ω!üí£'
        case HitStatus.DESTROYED.value:
            answer = '–ö–æ—Ä–∞–±–ª—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –ø–æ—Ç–æ–ø–ª–µ–Ω!üçæ'

    await message.answer(f'–ü–æ–ª–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:\n\n{ai_board}\n{answer}')

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–Ω–µ—Ü –∏–≥—Ä—ã
    if data['finished']:
        # await message.answer(render('end_feedback/win.jinja2'))
        await message.answer('–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!')
        await state.set_state(None)

        try:
            await do_request(
                f'{settings.BACKEND_HOST}/stats/save_data',
            )
        except ClientResponseError:
            await message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã')
        return

    # –µ—Å–ª–∏ –ø–æ–ø–∞–¥–∞–Ω–∏–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ—â–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É
    if strike_status in (HitStatus.HIT.value, HitStatus.DESTROYED.value):
        await message.answer('–ö—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã—Å—Ç—Ä–µ–ª–∏—Ç—å?\n' '–ü—Ä–∏–º–µ—Ä –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—è: A6 –∏–ª–∏ a6')
        return
    # –µ—Å–ª–∏ –ø—Ä–æ–º–∞—Ö, —Ö–æ–¥ –¥–µ–ª–∞–µ—Ç –∏–∏
    else:
        ai_status = HitStatus.HIT.value
        while ai_status in (HitStatus.HIT.value, HitStatus.DESTROYED.value):
            await asyncio.sleep(0)
            # –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –±—ç–∫, –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            try:
                data = (
                    await do_request(
                        f'{settings.BACKEND_HOST}/game/ai_strike',
                    )
                )['data']
            except ClientResponseError:
                continue

            ai_status = data['status']
            player_board = parse_board(data['player_board'])

            # –≤—ã–≤–æ–¥–∏—Ç—Å—è –ø–æ–ª–µ —é–∑–µ—Ä–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã—Å—Ç—Ä–µ–ª–∞
            match ai_status:
                case HitStatus.MISS.value:
                    answer = '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è!üçæ'
                case HitStatus.HIT.value:
                    answer = '–ù–∞—à –∫–æ—Ä–∞–±–ª—å –ø–æ–¥–±–∏—Ç, –∫–∞–ø–∏—Ç–∞–Ω!üí£'
                case HitStatus.DESTROYED.value:
                    answer = '–ü–∞–ª—É–Ω–¥—Ä–∞! –ö–æ—Ä–∞–±–ª—å –ø–æ—Ç–æ–ø–ª–µ–Ω!‚öìÔ∏è'

            await message.answer(f'–í–∞—à–µ –ø–æ–ª–µ:\n\n{player_board}\n{answer}')

            # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–Ω–µ—Ü –∏–≥—Ä—ã
            if data['finished']:
                # await message.answer(render('end_feedback/loss.jinja2'))
                await message.answer('–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!')
                await state.set_state(None)

                try:
                    await do_request(
                        f'{settings.BACKEND_HOST}/stats/save_data',
                    )
                except ClientResponseError:
                    await message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã')
                return

    # –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è, –ø–æ–∫–∞ —É –æ–¥–Ω–æ–≥–æ –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è –∫–æ—Ä–∞–±–ª–∏
    await message.answer(f'–ü–æ–ª–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:\n\n{ai_board}')
    await message.answer('–ö—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã—Å—Ç—Ä–µ–ª–∏—Ç—å?\n' '–ü—Ä–∏–º–µ—Ä –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—è: A6 –∏–ª–∏ a6')
    return
